name: Build and Push Standard PERN Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
      - 'k8s-standard/**'
      - '.github/workflows/build-push-standard.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'k8s-standard/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.image.outputs.image }}
      backend-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITOPS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/pern-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=standard-latest,enable={{is_default_branch}}
          type=raw,value=standard-${{ github.sha }},enable={{is_default_branch}}

    - name: Build and push Backend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.IMAGE_PREFIX }}/pern-backend:standard-latest" >> $GITHUB_OUTPUT

  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-image: ${{ steps.image.outputs.image }}
      frontend-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITOPS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/pern-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=standard-latest,enable={{is_default_branch}}
          type=raw,value=standard-${{ github.sha }},enable={{is_default_branch}}

    - name: Build and push Frontend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./apps/frontend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.IMAGE_PREFIX }}/pern-frontend:standard-latest" >> $GITHUB_OUTPUT

  validate-manifests:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2

    - name: Validate Development Manifests
      run: |
        cd k8s-standard/overlays/development
        kustomize build . > /tmp/dev-manifests.yaml
        echo "✅ Development manifests are valid"
        echo "Lines in manifest: $(wc -l < /tmp/dev-manifests.yaml)"

    - name: Validate Staging Manifests
      run: |
        cd k8s-standard/overlays/staging
        kustomize build . > /tmp/staging-manifests.yaml
        echo "✅ Staging manifests are valid"
        echo "Lines in manifest: $(wc -l < /tmp/staging-manifests.yaml)"

    - name: Upload manifests as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: k8s-standard-manifests
        path: |
          /tmp/dev-manifests.yaml
          /tmp/staging-manifests.yaml

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'pull_request'
    steps:
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-backend.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-frontend.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: '.'
