name: Enhanced CI/CD Pipeline with ArgoCD Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  GITOPS_REPO: mankinimbom/pern-gitops

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      k8s: ${{ steps.changes.outputs.k8s }}
      any: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' || steps.changes.outputs.k8s == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'
            k8s:
              - 'k8s/**'
              - '.github/workflows/**'

  test-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.k8s == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      - run: npm ci
      - run: npm run lint
      - run: npm run test:coverage

  test-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.k8s == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      REDIS_URL: redis://localhost:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json
      - run: npm ci
      - run: npm run lint
      - run: npm run test:coverage

  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.any == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [detect-changes]
    if: needs.detect-changes.outputs.any == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.version.outputs.image-tag }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate enhanced version tags for ArgoCD
        id: version
        run: |
          SHORT_SHA=${GITHUB_SHA:0:7}
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Use commit SHA as primary tag for GitOps consistency
            IMAGE_TAG="${SHORT_SHA}"
            VERSION="${SHORT_SHA}"
          else
            # Branch-based tags for non-main branches  
            BRANCH_NAME="${{ github.ref_name }}"
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            IMAGE_TAG="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
            VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/pern-${{ matrix.component }}
          tags: |
            type=raw,value=${{ steps.version.outputs.image-tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.component }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}

  update-gitops:
    name: Update GitOps Repository
    needs: [build-and-push, detect-changes]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any == 'true' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0

      - name: Setup git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update staging images
        run: |
          SHORT_SHA="${{ needs.build-and-push.outputs.short-sha }}"
          
          # Update staging kustomization.yaml with new image tags
          yq eval ".images[0].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/overlays/staging/kustomization.yaml
          yq eval ".images[1].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/overlays/staging/kustomization.yaml
          
          # Also update base for ArgoCD Image Updater reference
          yq eval ".images[0].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/base/kustomization.yaml
          yq eval ".images[1].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/base/kustomization.yaml

      - name: Commit and push changes
        run: |
          git add apps/pern-app/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          cat > /tmp/commit-msg << EOF
          🚀 Auto-update: Deploy ${{ needs.build-and-push.outputs.short-sha }} to staging
          
          📊 Images Updated:
          - Backend: ghcr.io/${{ github.repository_owner }}/pern-backend:${{ needs.build-and-push.outputs.short-sha }}
          - Frontend: ghcr.io/${{ github.repository_owner }}/pern-frontend:${{ needs.build-and-push.outputs.short-sha }}
          
          🔍 Metadata:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow: ${{ github.run_number }}
          - Author: ${{ github.actor }}
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF

          git commit -F /tmp/commit-msg
          git push origin main

      - name: Wait for ArgoCD auto-sync
        run: |
          echo "⏳ Waiting for ArgoCD to sync staging deployment..."
          sleep 30

  deploy-production:
    needs: [update-gitops, detect-changes]
    if: needs.detect-changes.outputs.any == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: production
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0

      - name: Setup git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update production images
        run: |
          SHORT_SHA="${{ needs.build-and-push.outputs.short-sha }}"
          
          # Update production kustomization.yaml with new image tags
          yq eval ".images[0].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/overlays/production/kustomization.yaml
          yq eval ".images[1].newTag = \"${SHORT_SHA}\"" -i apps/pern-app/overlays/production/kustomization.yaml

      - name: Commit and push production changes
        run: |
          git add apps/pern-app/overlays/production/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          cat > /tmp/commit-msg << EOF
          🚀 Deploy to production: ${{ needs.build-and-push.outputs.short-sha }}

          📊 Images:
          - Frontend: ghcr.io/${{ github.repository_owner }}/pern-frontend:${{ needs.build-and-push.outputs.short-sha }}
          - Backend: ghcr.io/${{ github.repository_owner }}/pern-backend:${{ needs.build-and-push.outputs.short-sha }}

          🔍 Metadata:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow: ${{ github.run_number }}
          - Actor: ${{ github.actor }}
          - Promoted from: staging
          EOF

          git commit -F /tmp/commit-msg
          git push origin main

  rollback-on-failure:
    needs: [update-gitops, deploy-production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0

      - name: Setup git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Rollback to previous version
        run: |
          PREVIOUS_COMMIT=$(git log --oneline --grep="Deploy to staging" -n 2 | tail -1 | cut -d' ' -f1)
          
          if [ -n "$PREVIOUS_COMMIT" ]; then
            git revert --no-edit HEAD
            git push origin main
            echo "🔄 Rolled back to previous deployment: $PREVIOUS_COMMIT"
          else
            echo "⚠️ No previous deployment found for rollback"
          fi

  notify:
    needs: [update-gitops, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Production deployment successful!"
          elif [ "${{ needs.update-gitops.result }}" == "success" ]; then
            echo "✅ Staging deployment successful!"
          else
            echo "❌ Deployment failed"
          fi
          
          echo "📊 Deployment Summary:"
          echo "- Version: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Actor: ${{ github.actor }}"
          echo "- Workflow: ${{ github.run_number }}"