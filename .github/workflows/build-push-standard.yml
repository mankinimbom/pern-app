name: Build Standard K8s Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
      - 'k8s-standard/**'
      - '.github/workflows/build-push-standard.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'k8s-standard/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}
  GITOPS_REPO: mankinimbom/pern-gitops

jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.image.outputs.image }}
      backend-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITOPS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/pern-backend-standard
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=PERN Backend Standard
          org.opencontainers.image.description=PERN Stack Backend (Standard K8s Deployment)

    - name: Build and push Backend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        # Extract the main tag (first tag from metadata)
        MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "image=${MAIN_TAG}" >> $GITHUB_OUTPUT
        echo "tag=$(echo ${MAIN_TAG} | cut -d: -f2)" >> $GITHUB_OUTPUT

  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-image: ${{ steps.image.outputs.image }}
      frontend-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITOPS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/pern-frontend-standard
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=PERN Frontend Standard
          org.opencontainers.image.description=PERN Stack Frontend (Standard K8s Deployment)

    - name: Build and push Frontend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./apps/frontend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        # Extract the main tag (first tag from metadata)
        MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "image=${MAIN_TAG}" >> $GITHUB_OUTPUT
        echo "tag=$(echo ${MAIN_TAG} | cut -d: -f2)" >> $GITHUB_OUTPUT

  validate-manifests:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2

    - name: Validate Development Manifests
      run: |
        cd k8s-standard/overlays/development
        kustomize build . > /tmp/dev-manifests.yaml
        echo "✅ Development manifests are valid"
        echo "Lines in manifest: $(wc -l < /tmp/dev-manifests.yaml)"

    - name: Validate Staging Manifests
      run: |
        cd k8s-standard/overlays/staging
        kustomize build . > /tmp/staging-manifests.yaml
        echo "✅ Staging manifests are valid"
        echo "Lines in manifest: $(wc -l < /tmp/staging-manifests.yaml)"

    - name: Upload manifests as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: k8s-standard-manifests
        path: |
          /tmp/dev-manifests.yaml
          /tmp/staging-manifests.yaml

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'pull_request'
    steps:
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-backend.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-frontend.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: '.'

  update-gitops-standard:
    name: Update GitOps Repository - Standard K8s
    needs: [build-backend, build-frontend, validate-manifests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      backend-image: ${{ needs.build-backend.outputs.backend-image }}
      frontend-image: ${{ needs.build-frontend.outputs.frontend-image }}
    
    steps:
      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          fetch-depth: 0

      - name: Setup git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update standard K8s manifests with new image tags
        run: |
          BACKEND_IMAGE="${{ needs.build-backend.outputs.backend-image }}"
          FRONTEND_IMAGE="${{ needs.build-frontend.outputs.frontend-image }}"
          
          echo "� Updating standard K8s manifests..."
          echo "Backend: $BACKEND_IMAGE"
          echo "Frontend: $FRONTEND_IMAGE"
          
          # Check if standard app directory exists, if not create it
          if [ ! -d "apps/pern-app-standard" ]; then
            echo "📁 Creating standard app directory in GitOps repo..."
            mkdir -p apps/pern-app-standard
            
            # Copy standard manifests from main repo (we'll need to add this step)
            echo "📋 Standard app manifests will be managed by ArgoCD"
          fi
          
          # Create or update kustomization files for image updates
          cat > apps/pern-app-standard/kustomization.yaml << EOF
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          
          resources:
            - https://github.com/mankinimbom/pern-app//k8s-standard/overlays/development
            - https://github.com/mankinimbom/pern-app//k8s-standard/overlays/staging
          
          images:
            - name: ghcr.io/mankinimbom/pern-backend-standard
              newName: ghcr.io/mankinimbom/pern-backend-standard
              newTag: "latest"
            - name: ghcr.io/mankinimbom/pern-frontend-standard  
              newName: ghcr.io/mankinimbom/pern-frontend-standard
              newTag: "latest"
          
          commonLabels:
            deployment-type: standard-k8s
            managed-by: argocd
          EOF

      - name: Commit and push changes
        run: |
          git add apps/pern-app-standard/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          cat > /tmp/commit-msg << EOF
          🚀 Update Standard K8s: Deploy latest images
          
          📊 Images Updated:
          - Backend: ${{ needs.build-backend.outputs.backend-image }}
          - Frontend: ${{ needs.build-frontend.outputs.frontend-image }}
          
          🔍 Metadata:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow: ${{ github.run_number }}
          - Author: ${{ github.actor }}
          - Deployment Type: Standard Kubernetes (vs Rollouts)
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF

          git commit -F /tmp/commit-msg
          git push origin main

  notify-gitops-update:
    runs-on: ubuntu-latest
    needs: [update-gitops-standard]
    if: always()
    steps:
    - name: GitOps update notification
      run: |
        if [ "${{ needs.update-gitops-standard.result }}" == "success" ]; then
          echo "✅ GitOps repository updated successfully!"
          echo "🎯 ArgoCD will now deploy the standard K8s application"
          echo ""
          echo "📊 Updated Images:"
          echo "- Backend: ${{ needs.update-gitops-standard.outputs.backend-image }}"
          echo "- Frontend: ${{ needs.update-gitops-standard.outputs.frontend-image }}"
          echo ""
          echo "🌐 Expected Deployments:"
          echo "- Development: pern-standard namespace"
          echo "- Staging: pern-standard namespace"
          echo ""
          echo "⏳ Check ArgoCD for deployment status..."
        else
          echo "❌ GitOps repository update failed"
          echo "Standard K8s deployment will not proceed"
        fi
        
        echo "📊 Build Summary:"
        echo "- Commit: ${{ github.sha }}"
        echo "- Actor: ${{ github.actor }}"
        echo "- Workflow: ${{ github.run_number }}"
